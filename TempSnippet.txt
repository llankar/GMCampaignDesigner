    def create_sidebar(self):
        self.sidebar_frame = ctk.CTkFrame(self.main_frame, width=220)
        self.sidebar_frame.pack(side="left", fill="y", padx=5, pady=5)
        self.sidebar_frame.pack_propagate(False)
        self.sidebar_inner = ctk.CTkFrame(self.sidebar_frame, fg_color="transparent")
        self.sidebar_inner.pack(fill="both", expand=True, padx=5, pady=5)

        # Logo
        logo_path = os.path.join("assets", "GMCampaignDesigner logo.png")
        if os.path.exists(logo_path):
            logo_image = Image.open(logo_path).resize((60, 60))
            logo = ctk.CTkImage(light_image=logo_image, dark_image=logo_image, size=(80, 80))
            self.logo_image = logo
            logo_label = ctk.CTkLabel(self.sidebar_inner, image=logo, text="")
            logo_label.pack(pady=(0, 3), anchor="center")

        # Header label
        header_label = ctk.CTkLabel(self.sidebar_inner, text="Campaign Tools", font=("Helvetica", 16, "bold"))
        header_label.pack(pady=(0, 2), anchor="center")

        # Database display container
        db_container = ctk.CTkFrame(self.sidebar_inner, fg_color="transparent",
                                    border_color="#005fa3", border_width=2, corner_radius=8)
        db_container.pack(pady=(0, 5), anchor="center", fill="x", padx=5)
        db_title_label = ctk.CTkLabel(db_container, text="Database:", font=("Segoe UI", 16, "bold"),
                                    fg_color="transparent", text_color="white")
        db_title_label.pack(pady=(3, 0), anchor="center")
        db_path = ConfigHelper.get("Database", "path", fallback="default_campaign.db")
        db_name = os.path.splitext(os.path.basename(db_path))[0]
        self.db_name_label = ctk.CTkLabel(db_container, text=db_name,
                                        font=("Segoe UI", 14, "italic"), fg_color="transparent", text_color="white")
        self.db_name_label.pack(pady=(0, 1), anchor="center")
        try:
            # Show full absolute path on hover
            full_path = os.path.abspath(db_path)
            self.db_tooltip = ToolTip(self.db_name_label, full_path)
        except Exception:
            self.db_tooltip = None

        self.create_accordion_sidebar()

    def create_accordion_sidebar(self):
        container = ctk.CTkFrame(self.sidebar_inner, fg_color="transparent")
        container.pack(fill="both", expand=True, padx=2, pady=2)
        sections = []  # track all sections to enforce single-open behavior
        default_title = "Campaign Workshop"
        default_meta = {"sec": None}

        def make_section(parent, title, buttons):
            sec = ctk.CTkFrame(parent)
            sec.pack(fill="x", pady=(4, 6))

            header = ctk.CTkFrame(sec, fg_color="#0b3d6e")
            header.pack(fill="x")
            title_lbl = ctk.CTkLabel(header, text=title, anchor="center")
            title_lbl.pack(fill="x", pady=6)
            state = {"open": False, "after": None}

            body = ctk.CTkFrame(sec, fg_color="transparent")
            # grid layout for buttons
            cols = 2
            for c in range(cols):
                body.grid_columnconfigure(c, weight=1)
            for idx, (icon_key, tooltip, cmd) in enumerate(buttons):
                r, c = divmod(idx, cols)
                icon = self.icons.get(icon_key)
                btn = create_icon_button(body, icon, tooltip, cmd)
                btn.grid(row=r, column=c, padx=2, pady=2, sticky="ew")

            def expand():
                if state["open"]:
                    return
                state["open"] = True
                try:
                    body.pack(fill="x", padx=2, pady=(2, 2))
                except Exception:
                    pass

            def collapse():
                if not state["open"]:
                    return
                state["open"] = False
                try:
                    body.pack_forget()
                except Exception:
                    pass

            def on_enter(_e=None):
                # Cancel pending collapse on this section
                if state["after"]:
                    try:
                        sec.after_cancel(state["after"])
                    except Exception:
                        pass
                    state["after"] = None
                # Collapse all other sections immediately to ensure only one open
                for meta in sections:
                    if meta["sec"] is sec:
                        continue
                    if meta["state"]["after"]:
                        try:
                            meta["sec"].after_cancel(meta["state"]["after"])
                        except Exception:
                            pass
                        meta["state"]["after"] = None
                    meta["collapse"]()
                # Expand this section
                expand()

            def on_leave(_e=None):
                # schedule collapse to avoid flicker
                if state["after"]:
                    try:
                        sec.after_cancel(state["after"])
                    except Exception:
                        pass
                state["after"] = sec.after(350, collapse)

            # Only header is visible until hover
            collapse()
            header.bind("<Enter>", on_enter)
            sec.bind("<Enter>", on_enter)
            sec.bind("<Leave>", on_leave)
            body.bind("<Enter>", on_enter)
            # Register section for global coordination
            sections.append({
                "sec": sec,
                "state": state,
                "collapse": collapse,
                "expand": expand,
                "title": title,
            })
            return sec

        # Group buttons
        data_system = [
            ("change_db", "Change Data Storage", self.change_database_storage),
            ("swarm_path", "Set SwarmUI Path", self.select_swarmui_path),
            ("customize_fields", "Customize Fields", self.open_custom_fields_editor),
        ]
        content = [
            ("manage_scenarios", "Manage Scenarios", lambda: self.open_entity("scenarios")),
            ("manage_pcs", "Manage PCs", lambda: self.open_entity("pcs")),
            ("manage_npcs", "Manage NPCs", lambda: self.open_entity("npcs")),
            ("manage_creatures", "Manage Creatures", lambda: self.open_entity("creatures")),
            ("manage_factions", "Manage Factions", lambda: self.open_entity("factions")),
            ("manage_places", "Manage Places", lambda: self.open_entity("places")),
            ("manage_objects", "Manage Objects", lambda: self.open_entity("objects")),
            ("manage_informations", "Manage Informations", lambda: self.open_entity("informations")),
            ("manage_clues", "Manage Clues", lambda: self.open_entity("clues")),
            ("manage_maps", "Manage Maps", lambda: self.open_entity("maps")),
        ]
        relations = [
            ("npc_graph", "Open NPC Graph Editor", self.open_npc_graph_editor),
            ("pc_graph", "Open PC Graph Editor", self.open_pc_graph_editor),
            ("faction_graph", "Open Factions Graph Editor", self.open_faction_graph_editor),
            ("scenario_graph", "Open Scenario Graph Editor", self.open_scenario_graph_editor),
        ]
        utilities = [
            ("generate_scenario", "Generate Scenario", self.open_scenario_generator),
            ("import_scenario", "Import Scenario", self.open_scenario_importer),
            ("gm_screen", "Open GM Screen", self.open_gm_screen),
            ("export_scenarios", "Export Scenarios", self.preview_and_export_scenarios),
            ("export_foundry", "Export Scenarios for Foundry", self.export_foundry),
            ("generate_portraits", "Generate Portraits", self.generate_missing_portraits),
            ("associate_portraits", "Associate NPC Portraits", self.associate_npc_portraits),
            ("map_tool", "Map Tool", self.map_tool),
        ]

        make_section(container, "Data & System", data_system)
        make_section(container, "Campaign Workshop", content)
        make_section(container, "Relations & Graphs", relations)
        make_section(container, "Utilities", utilities)

        # Open the default section by default
        for meta in sections:
            if meta.get("title") == default_title:
                default_meta = meta
                try:
                    meta["expand"]()
                except Exception:
                    pass
                break

        # If pointer leaves the accordion entirely, collapse all sections
        def _collapse_all(_e=None):
            # Collapse all, then re-open the default section so it is visible by default
            for meta in sections:
                if meta["state"]["after"]:
                    try:
                        meta["sec"].after_cancel(meta["state"]["after"])
                    except Exception:
                        pass
                    meta["state"]["after"] = None
                meta["collapse"]()
            # Re-open default
            if default_meta.get("expand"):
                try:
                    default_meta["expand"]()
                except Exception:
